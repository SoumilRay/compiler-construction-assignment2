%{
#include "lex.yy.c"
#include <stdio.h>
#include <stdlib.h>
%}
%token PROGRAM IDENTIFIER VAR BEGINN END PERIOD INTEGER REAL BOOLEAN CHARACTER COLON SEMICOLON COMMA REL_OP BOOL_OP AR_OP TO DOWNTO IF ELSE WHILE FOR DO ARRAY READ WRITE QUESTIONMARK EXCLAMATIONMARK STRING FNUMBER DNUMBER BO BC ASS_OP THEN SBO SBC OF
%%

S: PROGRAM IDENTIFIER SEMICOLON VAR VARLINES BLOCK PERIOD {return 1;}
 ;
VARLINES: VARLINE VARLINES
        | VARLINE
        ;
VARLINE: IDENTIFIER COMMA VARLINE
       | IDENTIFIER COLON TYPE SEMICOLON
       | IDENTIFIER COLON ARRAY_DECLARATION SEMICOLON 
       ;
       
BLOCK: BEGINN STATEMENTS END
     ;
     
STATEMENTS: STATEMENT STATEMENTS
          | STATEMENT
          ;    
     
STATEMENT: BLOCK
         | READING
         | WRITING
         | ASSIGNMENT
         | SIMPLEIF
         | IFTHENELSE
         | ARRAY_INDEXING
         | WHILEDO
         | FORDO
         ;
          
READING: READ BO IDENTIFIERS BC SEMICOLON
       | READ BO ARRAY_INDEXING BC SEMICOLON
       ;
       
WRITING: WRITE BO WRITECONTENTS BC SEMICOLON
       ;
       
WRITECONTENTS: STRINGS WRITECONTENTS
             | IDENTIFIERS WRITECONTENTS
             | STRINGS
             | IDENTIFIERS
             ;

IDENTIFIERS: IDENTIFIER COMMA IDENTIFIERS
           | IDENTIFIER
           ;
           
STRINGS: STRING COMMA STRINGS
       | STRING
       ;
       
ASSIGNMENT: IDENTIFIER ASS_OP FORDO_EXPRESSION SEMICOLON
              | IDENTIFIER ASS_OP RELATIONAL_EXPRESSION SEMICOLON
              | IDENTIFIER ASS_OP ARITHMETIC_TYPES SEMICOLON
              ;
          
SIMPLEIF: IF RELATIONAL_EXPRESSION THEN BLOCK SEMICOLON
        ;
        
IFTHENELSE: IF RELATIONAL_EXPRESSION THEN BLOCK ELSE BLOCK SEMICOLON
          ;
          
WHILEDO: WHILE RELATIONAL_EXPRESSION DO BLOCK SEMICOLON
       ;

TO_EXP: TO
       | DOWNTO
       ;
FORDO: FOR IDENTIFIER ASS_OP ARITHMETIC_TYPES TO_EXP FORDO_EXPRESSION DO BLOCK SEMICOLON
       | FOR IDENTIFIER ASS_OP ARITHMETIC_TYPES TO_EXP ARITHMETIC_TYPES DO BLOCK SEMICOLON
       | FOR IDENTIFIER ASS_OP FORDO_EXPRESSION TO_EXP FORDO_EXPRESSION DO BLOCK SEMICOLON
       | FOR IDENTIFIER ASS_OP FORDO_EXPRESSION TO_EXP ARITHMETIC_TYPES DO BLOCK SEMICOLON
     ;

FORDO_EXPRESSION: ARITHMETIC_EXPRESSION
                     ;

ARITHMETIC_TYPES: DNUMBER
                     | FNUMBER
                     | IDENTIFIER
                     | ARRAY_INDEXING
                     ;

ARITHMETIC_EXPRESSION: ARITHMETIC_TYPES AR_OP ARITHMETIC_TYPES
                     | LR_AEXP
                     | ARITHMETIC_TYPES AR_OP ARITHMETIC_EXPRESSION
                     | LR_AEXP AR_OP ARITHMETIC_TYPES
                     ;

LR_AEXP: BO ARITHMETIC_TYPES AR_OP ARITHMETIC_TYPES BC

RELATIONAL_EXPRESSION: ARITHMETIC_TYPES BOOL_REL_OP ARITHMETIC_TYPES
                     | BO ARITHMETIC_TYPES BOOL_REL_OP ARITHMETIC_TYPES BC
                     | ARITHMETIC_EXPRESSION BOOL_REL_OP ARITHMETIC_TYPES
                     | BO ARITHMETIC_TYPES BOOL_REL_OP ARITHMETIC_EXPRESSION BC
                     ;
BOOL_REL_OP: BOOL_OP
              | REL_OP
              ;

ARRAY_DECLARATION:  ARRAY SBO DNUMBER PERIOD PERIOD DNUMBER SBC OF TYPE
                     ;

ARRAY_INDEXING: IDENTIFIER SBO ARITHMETIC_EXPRESSION SBC
                     | IDENTIFIER SBO DNUMBER SBC
                     | IDENTIFIER SBO IDENTIFIER SBC
                     ;
TYPE: INTEGER
       | REAL
       | CHARACTER
       | BOOLEAN
       ;
%%

void main(int argc,char* argv[])
{      if(argc< 2) return;
       yyin = fopen(argv[1],"r");
	yyparse();
       fclose(yyin);
	printf("valid input\n");
	exit(0);
}

void yyerror()
{
	printf("syntax error\n");
	exit(0);
}
